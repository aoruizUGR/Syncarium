window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "syncarium.tui", "modulename": "syncarium.tui", "kind": "module", "doc": "<h1 id=\"tui\">tui</h1>\n\n<p><strong>Project</strong>: Syncarium - Intelligent Timing Platform Toolkit<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, University of Granada<br />\n<strong>Created</strong>: 2025-05-22<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.app", "modulename": "syncarium.tui.app", "kind": "module", "doc": "<h1 id=\"apppy\">app.py</h1>\n\n<p><strong>Project</strong>: Syncarium - Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: Syncarium TUI entry point<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, University of Granada<br />\n<strong>Created</strong>: 2025-05-22<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.app.TuiApp", "modulename": "syncarium.tui.app", "qualname": "TuiApp", "kind": "class", "doc": "<p>A Text-based User Interface (TUI) application that initializes and manages\nvarious interactive console-based tools.</p>\n\n<p>This class serves as the main entry point for a TUI application, setting up\ndifferent modules such as Platform Initialization, PTP management, traffic generation,\ndata extraction, and utility functions.</p>\n\n<h3 id=\"attributes\">Attributes:</h3>\n\n<ul>\n<li><strong>console</strong> (<code>Console</code>): The console object used for rendering output.</li>\n<li><strong>platinit</strong> (<code>PlatInit</code>): Manages Platform Initialization options.</li>\n<li><strong>synccore</strong> (<code>SyncCore</code>): Manages the Precision Time Protocol (PTP) menu.</li>\n<li><strong>loadgen</strong> (<code>LoadGen</code>): Manages the traffic generator menu.</li>\n<li><strong>dataex</strong> (<code>DataEx</code>): Handles the data extraction tool menu.</li>\n<li><strong>exporchestra</strong> (<code>ExpOrchestra</code>): Automatization of an experiment.</li>\n<li><strong>vt</strong> (<code>ViewTools</code>): Provides utility functions for the TUI.</li>\n</ul>\n"}, {"fullname": "syncarium.tui.app.TuiApp.__init__", "modulename": "syncarium.tui.app", "qualname": "TuiApp.__init__", "kind": "function", "doc": "<p>Initializes the TuiApp with an optional custom console.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>console</strong> (<code>Optional[Console]</code>): A custom console instance for output.<br />\nIf not provided, a default <code>Console</code> instance is used.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "syncarium.tui.app.TuiApp.console", "modulename": "syncarium.tui.app", "qualname": "TuiApp.console", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rich.console.Console"}, {"fullname": "syncarium.tui.app.TuiApp.vt", "modulename": "syncarium.tui.app", "qualname": "TuiApp.vt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.utils.viewtools.ViewTools"}, {"fullname": "syncarium.tui.app.TuiApp.platinit", "modulename": "syncarium.tui.app", "qualname": "TuiApp.platinit", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.core.plat_init.PlatInit"}, {"fullname": "syncarium.tui.app.TuiApp.synccore", "modulename": "syncarium.tui.app", "qualname": "TuiApp.synccore", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.core.sync_core.SyncCore"}, {"fullname": "syncarium.tui.app.TuiApp.loadgen", "modulename": "syncarium.tui.app", "qualname": "TuiApp.loadgen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.core.load_gen.LoadGen"}, {"fullname": "syncarium.tui.app.TuiApp.dataex", "modulename": "syncarium.tui.app", "qualname": "TuiApp.dataex", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.core.data_ex.DataEx"}, {"fullname": "syncarium.tui.app.TuiApp.exporchestra", "modulename": "syncarium.tui.app", "qualname": "TuiApp.exporchestra", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.core.exp_orchestra.ExpOrchestra"}, {"fullname": "syncarium.tui.app.TuiApp.main", "modulename": "syncarium.tui.app", "qualname": "TuiApp.main", "kind": "function", "doc": "<p>Displays the main interactive menu of the TUI application and handles user navigation.</p>\n\n<p>This method runs an interactive loop that presents the main menu to the user,\ndisplays system information, and routes the user to the selected submenu.\nIt gracefully handles keyboard interruptions (e.g., Ctrl+C).</p>\n\n<h3 id=\"menu-options\">Menu Options:</h3>\n\n<ul>\n<li>\u2699\ufe0f PlatInit ----- Platform Initialization \u2192 <code>platinit.main_menu</code></li>\n<li>\u23f1\ufe0f SyncCore ----- Synchronization Core \u2192 <code>synccore.main_menu</code></li>\n<li>\ud83d\udea6 LoadGen ------ Load Generator \u2192 <code>loadgen.main_menu</code></li>\n<li>\ud83d\udcc8 DataEx ------- Data Extractor \u2192 <code>dataex.main_menu</code></li>\n<li>\ud83e\uddea ExpOrchestra - Experiment Orchestration \u2192 <code>exporchestra.main_menu</code></li>\n<li>\ud83d\udd04 Refresh View \u2192 <code>vt.refresh_view</code></li>\n<li>\u274c Exit \u2192 <code>exit</code></li>\n</ul>\n\n<h3 id=\"notes\">Notes:</h3>\n\n<ul>\n<li>Graceful exit is handled via <strong>Ctrl+C</strong>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.app.TuiApp.exit", "modulename": "syncarium.tui.app", "qualname": "TuiApp.exit", "kind": "function", "doc": "<p>Performs cleanup operations before exiting the TUI application.</p>\n\n<p>This method stops active processes such as data extraction and traffic generation,\nand displays exit messages to the user. Some cleanup steps are commented out\nand may be enabled as needed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core", "modulename": "syncarium.tui.core", "kind": "module", "doc": "<h1 id=\"core\">core</h1>\n\n<p><strong>Project</strong>: Syncarium - Intelligent Timing Platform Toolkit<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, University of Granada<br />\n<strong>Created</strong>: 2025-05-22<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.core.data_ex", "modulename": "syncarium.tui.core.data_ex", "kind": "module", "doc": "<h1 id=\"data_expy\">data_ex.py</h1>\n\n<p><strong>Project</strong>: Syncarium \u2013 Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: Data Extractor for TUI<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, PhD Student V\u00edctor V\u00e1zquez, University of Granada<br />\n<strong>Created</strong>: 2025-05-31<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.core.data_ex.DataEx", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx", "kind": "class", "doc": "<p>Tool for extracting data from configured sources and managing output files.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Utility tools for view-related operations.</li>\n<li><strong>output_dir</strong> (<code>Path</code>): Directory where output files will be stored.</li>\n<li><strong>loaded_datasources</strong> (<code>List[dsources.DataSource]</code>): List of data sources that have been loaded.</li>\n<li><strong>writer_process</strong> (<code>multiprocessing.Process</code>): Background process responsible for writing output.</li>\n<li><strong>output_filepath</strong> (<code>Optional[Path]</code>): Path to the output file, if available.</li>\n<li><strong>start_time</strong> (<code>Optional[float]</code>): Timestamp marking the start of the extraction process.</li>\n<li><strong>duration</strong> (<code>Optional[int]</code>): Duration of the extraction process in seconds.</li>\n</ul>\n"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.__init__", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.__init__", "kind": "function", "doc": "<p>Initialize a new instance of <code>DataEx</code> with default paths and metadata.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Utility tools for view-related operations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vt</span><span class=\"p\">:</span> <span class=\"n\">syncarium</span><span class=\"o\">.</span><span class=\"n\">tui</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">viewtools</span><span class=\"o\">.</span><span class=\"n\">ViewTools</span></span>)</span>"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.vt", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.vt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.utils.viewtools.ViewTools"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.datasources_dir", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.datasources_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.output_dir", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.output_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.loaded_datasources", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.loaded_datasources", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[syncarium.tui.core.dsources.datasource.DataSource]"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.writer_process", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.writer_process", "kind": "variable", "doc": "<p></p>\n", "annotation": ": multiprocessing.context.Process"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.output_filepath", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.output_filepath", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pathlib.Path]"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.start_time", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.start_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.duration", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.main_menu", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.main_menu", "kind": "function", "doc": "<p>Render and manage the interactive terminal-based main menu for data extraction.</p>\n\n<p>Continuously displays a menu using InquirerPy, allowing the user to:</p>\n\n<ul>\n<li>Load data sources</li>\n<li>Start or stop the extractor</li>\n<li>View progress and extracted data</li>\n<li>Refresh the view</li>\n<li>Exit the tool</li>\n</ul>\n\n<p>The loop runs until the user selects <strong>\"\u274c Exit\"</strong> or interrupts the process with <strong>Ctrl+C</strong>.</p>\n\n<h3 id=\"menu-options\">Menu Options</h3>\n\n<ul>\n<li>\ud83d\udee2\ufe0f Load Data Sources \u2192 <code>load_datasources</code></li>\n<li>\ud83d\udcc8 Start Extractor \u2192 <code>start_extraction</code></li>\n<li>\ud83d\uded1 Stop Extractor \u2192 <code>stop_extraction</code></li>\n<li>\u23f3 Show Progress \u2192 <code>show_progress</code></li>\n<li>\ud83d\udcc4 Show Extracted Data \u2192 <code>show_extracted_data</code></li>\n<li>\ud83d\udd04 Refresh View \u2192 no action</li>\n<li>\u274c Exit \u2192 terminates the menu loop</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Graceful termination is supported via <strong>Ctrl+C</strong>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.load_datasources", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.load_datasources", "kind": "function", "doc": "<p>Load and configure data sources from a YAML configuration file.</p>\n\n<p>Clears any previously loaded sources and parses the selected configuration file,\ninstantiating the appropriate data source classes. If no file is provided, the user\nis prompted to select one interactively from the available files in the config directory.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>file_cfg</strong> (<code>Optional[str]</code>): Path to the YAML configuration file. If <code>None</code>, prompts the user to select one.</li>\n<li><strong>quiet</strong> (<code>bool</code>): If <code>True</code>, suppresses console output messages.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Prevents loading if the extractor process is currently running.</li>\n<li>Supports graceful cancellation via <strong>Ctrl+C</strong>.</li>\n<li>Automatically creates missing log files if required by a <code>FileLogDataSource</code>.</li>\n<li>Displays success or error messages for each data source loaded.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_cfg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.start_extraction", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.start_extraction", "kind": "function", "doc": "<p>Start the data extraction process using the configured data sources.</p>\n\n<p>Launches a background writer process that collects metrics and stores them\nin a CSV file. A YAML summary file is also generated, containing metadata\nabout the extraction session.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>suffix_out</strong> (<code>Optional[str]</code>): Suffix for the output CSV file name. If <code>None</code>, the user is prompted.</li>\n<li><strong>dir_out</strong> (<code>Optional[str]</code>): Directory where output files will be saved. If <code>None</code>, defaults to the configured output directory.</li>\n<li><strong>duration_out</strong> (<code>Optional[int]</code>): Duration of the extraction in seconds. If <code>None</code>, the user is prompted.</li>\n<li><strong>logger</strong>: Optional logger instance for logging messages.</li>\n<li><strong>extra_indent</strong> (<code>int</code>): Additional indentation level for console messages.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Prevents starting a new extraction if a writer process is already running.</li>\n<li>Prompts the user interactively for missing parameters unless provided.</li>\n<li>Automatically creates missing output directories and log files.</li>\n<li>Saves extraction metadata to a YAML file alongside the CSV output.</li>\n<li>Displays process details including PID, start time, duration, and assigned data sources.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">suffix_out</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dir_out</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">duration_out</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.write_metrics", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.write_metrics", "kind": "function", "doc": "<p>Collect metrics from configured data sources and write them to a CSV file.</p>\n\n<p>Starts each data source in a separate thread and coordinates data collection\nthrough a shared queue. Metrics are timestamped and written to the output file.\nUpon completion, metadata is appended to a YAML summary file.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>output_filepath</strong> (<code>Path</code>): Path to the output CSV file.</li>\n<li><strong>extractor_output_filepath</strong> (<code>Path</code>): Path to the YAML metadata file.</li>\n<li><strong>duration</strong> (<code>int</code>): Duration of the extraction process in seconds.</li>\n<li><strong>source_configs</strong> (<code>List[Dict[str, Any]]</code>): Configuration for each data source.</li>\n<li><strong>logger</strong>: Optional logger instance for logging messages.</li>\n<li><strong>extra_indent</strong> (<code>int</code>): Additional indentation level for console messages.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Each data source runs in its own thread and pushes metrics to a shared queue.</li>\n<li>The process ignores <code>SIGINT</code> to prevent interruption via keyboard.</li>\n<li>Graceful termination is supported via <code>SIGTERM</code>.</li>\n<li>Metadata including the stop time is appended to the YAML file after extraction ends.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">output_filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">extractor_output_filepath</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">source_configs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.stop_extraction", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.stop_extraction", "kind": "function", "doc": "<p>Forcefully stops the active data extraction process and resets session metadata.</p>\n\n<p>If the writer process is running, this method optionally prompts the user for confirmation,\nterminates the process, and clears output-related session variables.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>preconfirmation</strong> (<code>Optional[bool]</code>): If <code>True</code>, skips the confirmation prompt. Defaults to <code>False</code>.</li>\n<li><strong>logger</strong>: Logger instance used for logging messages. Defaults to <code>None</code>.</li>\n<li><strong>extra_indent</strong> (<code>int</code>): Additional indentation level for console messages. Defaults to <code>0</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">preconfirmation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.show_progress", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.show_progress", "kind": "function", "doc": "<p>Displays a real-time progress indicator for the ongoing data extraction process.</p>\n\n<p>If the writer process is active, this method uses the view tools to render a progress bar\nbased on the elapsed time since the extraction started.</p>\n\n<p>Console messages are shown if no extraction process is currently running.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.show_extracted_data", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.show_extracted_data", "kind": "function", "doc": "<p>Streams the real-time log output of the data extraction process to the console.</p>\n\n<p>If the writer process is active, this method uses the view tools to display the contents\nof the output log file. Otherwise, it notifies the user that no process is running.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.data_ex.DataEx.exit", "modulename": "syncarium.tui.core.data_ex", "qualname": "DataEx.exit", "kind": "function", "doc": "<p>Exits the TUI menu and performs cleanup operations.</p>\n\n<p>This method is intended to be called when the user chooses to exit the interface.\nIt stops any active data extraction process and releases associated resources.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources", "modulename": "syncarium.tui.core.dsources", "kind": "module", "doc": "<h1 id=\"dsources\">dsources</h1>\n\n<p><strong>Project</strong>: Syncarium \u2013 Intelligent Timing Platform Toolkit<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, PhD Student V\u00edctor V\u00e1zquez, University of Granada<br />\n<strong>Created</strong>: 2025-05-02<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.core.dsources.counter", "modulename": "syncarium.tui.core.dsources.counter", "kind": "module", "doc": "<p>Frequency counter data source.</p>\n"}, {"fullname": "syncarium.tui.core.dsources.counter.CounterDataSource", "modulename": "syncarium.tui.core.dsources.counter", "qualname": "CounterDataSource", "kind": "class", "doc": "<p>Frequency counter data source using the VISA communication standard.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>resource_name</strong> (<code>str</code>): VISA resource identifier of the frequency counter.</li>\n</ul>\n", "bases": "syncarium.tui.core.dsources.datasource.DataSource"}, {"fullname": "syncarium.tui.core.dsources.counter.CounterDataSource.__init__", "modulename": "syncarium.tui.core.dsources.counter", "qualname": "CounterDataSource.__init__", "kind": "function", "doc": "<p>Initializes a <code>CounterDataSource</code> with a specific VISA resource name.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>queue</strong> (<code>mp.Queue</code>): Queue used to send metrics.</li>\n<li><strong>event</strong> (<code>_EventType</code>): Event used to signal thread termination.</li>\n<li><strong>resource_name</strong> (<code>str</code>): VISA resource identifier of the frequency counter.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">bound</span> <span class=\"n\">method</span> <span class=\"n\">BaseContext</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"n\">of</span> <span class=\"o\">&lt;</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">DefaultContext</span> <span class=\"nb\">object</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">synchronize</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">resource_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "syncarium.tui.core.dsources.counter.CounterDataSource.resource_name", "modulename": "syncarium.tui.core.dsources.counter", "qualname": "CounterDataSource.resource_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.counter.CounterDataSource.run", "modulename": "syncarium.tui.core.dsources.counter", "qualname": "CounterDataSource.run", "kind": "function", "doc": "<p>Continuously reads data from the frequency counter and sends metrics to the queue.</p>\n\n<p>The method configures the instrument using VISA commands and reads timestamped\nmeasurements until the stop event is triggered.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.datasource", "modulename": "syncarium.tui.core.dsources.datasource", "kind": "module", "doc": "<h1 id=\"source\">source</h1>\n\n<p><strong>Project</strong>: TempusNode - Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: Data Source Class.<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, PhD Student V\u00edctor V\u00e1zquez, University of Granada<br />\n<strong>Created</strong>: 2025-05-02<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.core.dsources.datasource.DataSource", "modulename": "syncarium.tui.core.dsources.datasource", "qualname": "DataSource", "kind": "class", "doc": "<p>A thread-based data source that sends timestamped metrics to a shared queue.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>name</strong> (<code>str</code>): Identifier for the data source.</li>\n<li><strong>queue</strong> (<code>queue.Queue</code>): Shared queue to which metrics are sent.</li>\n<li><strong>event</strong> (<code>threading.Event</code>): Event used to signal when the thread should stop.</li>\n</ul>\n", "bases": "threading.Thread"}, {"fullname": "syncarium.tui.core.dsources.datasource.DataSource.__init__", "modulename": "syncarium.tui.core.dsources.datasource", "qualname": "DataSource.__init__", "kind": "function", "doc": "<p>Initializes a new <code>DataSource</code> thread.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>name</strong> (<code>str</code>): Identifier for the data source.</li>\n<li><strong>queue</strong> (<code>queue.Queue</code>): Queue to which metrics will be sent.</li>\n<li><strong>event</strong> (<code>threading.Event</code>): Event used to signal thread termination.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span></span>)</span>"}, {"fullname": "syncarium.tui.core.dsources.datasource.DataSource.name", "modulename": "syncarium.tui.core.dsources.datasource", "qualname": "DataSource.name", "kind": "variable", "doc": "<p>A string used for identification purposes only.</p>\n\n<p>It has no semantics. Multiple threads may be given the same name. The\ninitial name is set by the constructor.</p>\n"}, {"fullname": "syncarium.tui.core.dsources.datasource.DataSource.queue", "modulename": "syncarium.tui.core.dsources.datasource", "qualname": "DataSource.queue", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.datasource.DataSource.event", "modulename": "syncarium.tui.core.dsources.datasource", "qualname": "DataSource.event", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.datasource.DataSource.daemon", "modulename": "syncarium.tui.core.dsources.datasource", "qualname": "DataSource.daemon", "kind": "variable", "doc": "<p>A boolean value indicating whether this thread is a daemon thread.</p>\n\n<p>This must be set before start() is called, otherwise RuntimeError is\nraised. Its initial value is inherited from the creating thread; the\nmain thread is not a daemon thread and therefore all threads created in\nthe main thread default to daemon = False.</p>\n\n<p>The entire Python program exits when only daemon threads are left.</p>\n"}, {"fullname": "syncarium.tui.core.dsources.datasource.DataSource.send_metric", "modulename": "syncarium.tui.core.dsources.datasource", "qualname": "DataSource.send_metric", "kind": "function", "doc": "<p>Sends a metric to the shared queue with a timestamp and a formatted name.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>timestamp</strong> (<code>float</code>): Time the metric was recorded.</li>\n<li><strong>name</strong> (<code>str</code>): Base name of the metric.</li>\n<li><strong>value</strong> (<code>Any</code>): Value of the metric.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.datasource.DataSource.stop", "modulename": "syncarium.tui.core.dsources.datasource", "qualname": "DataSource.stop", "kind": "function", "doc": "<p>Signals the thread to stop and waits for its termination.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.filelog", "modulename": "syncarium.tui.core.dsources.filelog", "kind": "module", "doc": "<h1 id=\"filelogpy\">filelog.py</h1>\n\n<p><strong>Project</strong>: Syncarium \u2013 Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: File Log Data Source Class<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, PhD Student V\u00edctor V\u00e1zquez, University of Granada<br />\n<strong>Created</strong>: 2025-05-02<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.core.dsources.filelog.FileLogDataSource", "modulename": "syncarium.tui.core.dsources.filelog", "qualname": "FileLogDataSource", "kind": "class", "doc": "<p>A data source that monitors a log file in real time and extracts metrics using regex patterns.</p>\n\n<p>This subclass of <code>DataSource</code> watches for new lines in a log file, applies a regex pattern\nto extract named groups, and sends the extracted metrics to a shared queue.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>pattern</strong> (<code>Pattern</code>): Compiled regex pattern used to extract metrics.</li>\n<li><strong>filepath</strong> (<code>str</code>): Path to the log file being monitored.</li>\n</ul>\n", "bases": "syncarium.tui.core.dsources.datasource.DataSource"}, {"fullname": "syncarium.tui.core.dsources.filelog.FileLogDataSource.__init__", "modulename": "syncarium.tui.core.dsources.filelog", "qualname": "FileLogDataSource.__init__", "kind": "function", "doc": "<p>Initializes a <code>FileLogDataSource</code> with a regex pattern and log file path.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>name</strong> (<code>str</code>): Identifier for the data source.</li>\n<li><strong>queue</strong> (<code>queue.Queue</code>): Queue to send extracted metrics to.</li>\n<li><strong>event</strong> (<code>threading.Event</code>): Event used to signal thread termination.</li>\n<li><strong>pattern</strong> (<code>str</code>): Regex pattern used to extract metrics from log lines.</li>\n<li><strong>filepath</strong> (<code>str</code>): Path to the log file to monitor.</li>\n</ul>\n\n<h3 id=\"raises\">Raises</h3>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: If the specified log file does not exist.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span>,</span><span class=\"param\">\t<span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "syncarium.tui.core.dsources.filelog.FileLogDataSource.pattern", "modulename": "syncarium.tui.core.dsources.filelog", "qualname": "FileLogDataSource.pattern", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Pattern"}, {"fullname": "syncarium.tui.core.dsources.filelog.FileLogDataSource.filepath", "modulename": "syncarium.tui.core.dsources.filelog", "qualname": "FileLogDataSource.filepath", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "syncarium.tui.core.dsources.filelog.FileLogDataSource.follow", "modulename": "syncarium.tui.core.dsources.filelog", "qualname": "FileLogDataSource.follow", "kind": "function", "doc": "<p>Generator that yields new lines appended to the file in real time.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>file</strong> (<code>TextIO</code>): Opened file object to read from.</li>\n</ul>\n\n<h3 id=\"yields\">Yields</h3>\n\n<ul>\n<li><strong>str</strong>: New lines as they are written to the file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\">file: &lt;class &#x27;TextIO&#x27;&gt;</span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.filelog.FileLogDataSource.run", "modulename": "syncarium.tui.core.dsources.filelog", "qualname": "FileLogDataSource.run", "kind": "function", "doc": "<p>Starts the thread and processes new lines from the log file.</p>\n\n<p>For each line that matches the regex pattern, extracts named groups and sends them\nas timestamped metrics to the shared queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "kind": "module", "doc": "<h1 id=\"ppsanalyzerpy\">ppsanalyzer.py</h1>\n\n<p><strong>Project</strong>: Syncarium \u2013 Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: NetTimeLogic PPS Analyzer Data Source Class<br />\n<strong>Author</strong>:  </p>\n\n<ul>\n<li>Original: Martin Burri <code>&lt;info@burrima.ch&gt;</code>, Sven Meier <code>&lt;contact@nettimelogic.com&gt;</code>  </li>\n<li>Adapted: PhD Student Alberto Ortega Ruiz, PhD Student V\u00edctor V\u00e1zquez, University of Granada<br />\n<strong>Created</strong>: 2025-05-02<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3 (with portions under LGPLv3)</li>\n</ul>\n\n<hr />\n\n<p>This file includes adapted code from the UniversalPpsAnalyzer project,<br />\noriginally licensed under the GNU Lesser General Public License v3.</p>\n\n<p>The original source code is available at:<br />\n[<a href=\"https://github.com/NetTimeLogic-OpenSource/UniversalpsAnalyzer\">https://github.com/NetTimeLogic-OpenSource/UniversalpsAnalyzer</a></p>\n\n<p>\u00a9 2020, NetTimeLogic GmbH, Switzerland.<br />\nSee [<a href=\"http://www.gnu.org/licenses/](http://se\">http://www.gnu.org/licenses/](http://se</a> details.</p>\n"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource", "kind": "class", "doc": "<p>Data source class for interfacing with a PPS (Pulse Per Second) analyzer.</p>\n\n<p>This class defines constants and register mappings used to interact\nwith a PPS hardware module. It does not implement active data acquisition\nbut serves as a base or utility class for accessing PPS-related registers.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>NUM_TSU</strong> (<code>int</code>): Total number of Timestamping Units (TSUs).</li>\n<li><strong>REG</strong> (<code>dict[str, int]</code>): Register map with relative addresses for PPS control.</li>\n<li><strong>port</strong> (<code>str</code>): Serial port used for UART communication.</li>\n<li><strong>uart</strong> (<code>Any</code>): UART interface (to be initialized externally).</li>\n<li><strong>pps_inputs</strong> (<code>List[int]</code>): List of active PPS input indices.</li>\n<li><strong>cable_delays</strong> (<code>List[int]</code>): Cable delay values (in nanoseconds) for each input.</li>\n<li><strong>tsu_state</strong> (<code>List[bool]</code>): Active/inactive state of each TSU.</li>\n<li><strong>base_addrs</strong> (<code>List[int]</code>): Base memory addresses for each TSU.</li>\n</ul>\n", "bases": "syncarium.tui.core.dsources.datasource.DataSource"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.__init__", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.__init__", "kind": "function", "doc": "<p>Initializes a <code>PPSAnalyzerDataSource</code> instance with configuration for PPS hardware.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>name</strong> (<code>str</code>): Identifier for the thread or component.</li>\n<li><strong>queue</strong> (<code>queue.Queue</code>): Queue for inter-thread communication.</li>\n<li><strong>event</strong> (<code>threading.Event</code>): Event used for synchronization.</li>\n<li><strong>serial_port</strong> (<code>str</code>, optional): Serial port for UART communication. Defaults to <code>\"/dev/ttyUSB1\"</code>.</li>\n<li><strong>pps_inputs</strong> (<code>List[int]</code>, optional): List of active PPS input indices. Defaults to all TSUs.</li>\n<li><strong>cable_delays</strong> (<code>List[int]</code>, optional): Cable delay values (in nanoseconds). Defaults to zero delay.</li>\n</ul>\n\n<h3 id=\"raises\">Raises</h3>\n\n<ul>\n<li><strong>ValueError</strong>: If <code>pps_inputs</code> and <code>cable_delays</code> have mismatched lengths.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span>,</span><span class=\"param\">\t<span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">serial_port</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/dev/ttyUSB1&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pps_inputs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cable_delays</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.NUM_TSU", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.NUM_TSU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.REG", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.REG", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.port", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.port", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.uart", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.uart", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.pps_inputs", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.pps_inputs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.cable_delays", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.cable_delays", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.tsu_state", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.tsu_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.base_addrs", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.base_addrs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.setUp", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.setUp", "kind": "function", "doc": "<p>Initializes the UART connection and configures the TSU modules.</p>\n\n<p>Opens the UART interface, clears previous configuration, enables each\nconfigured PPS input, and applies cable delay compensation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.setEnable", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.setEnable", "kind": "function", "doc": "<p>Enables or disables a specific TSU (Timestamping Unit).</p>\n\n<p>Writes to the appropriate registers to activate or deactivate the TSU,\nconfigure its interrupt behavior, and update its internal state.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>idx</strong> (<code>int</code>): Index of the TSU to configure.</li>\n<li><strong>enable</strong> (<code>bool</code>): <code>True</code> to enable the TSU, <code>False</code> to disable it.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">enable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.hasTimestamp", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.hasTimestamp", "kind": "function", "doc": "<p>Checks whether a timestamp is available for the specified TSU.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>idx</strong> (<code>int</code>): Index of the TSU to check.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>bool</strong>: <code>True</code> if a timestamp is available, <code>False</code> otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.getEventCount", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.getEventCount", "kind": "function", "doc": "<p>Returns the number of PPS events detected by the specified TSU.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>idx</strong> (<code>int</code>): Index of the TSU to query.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>int</strong>: Number of events counted by the TSU.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.readTimestamp", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.readTimestamp", "kind": "function", "doc": "<p>Reads the timestamp from the specified TSU.</p>\n\n<p>Retrieves both the seconds and nanoseconds components of the timestamp,\nand clears the interrupt flag afterward.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>idx</strong> (<code>int</code>): Index of the TSU to read from.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>tuple[int, int]</strong>: A tuple containing <code>(seconds, nanoseconds)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.run", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.run", "kind": "function", "doc": "<p>Main execution loop for the PPS monitoring thread.</p>\n\n<p>Initializes the system, monitors enabled TSUs for new timestamps,\ndetects missed events, and sends metrics for each valid PPS signal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.ppsanalyzer.PPSAnalyzerDataSource.stop", "modulename": "syncarium.tui.core.dsources.ppsanalyzer", "qualname": "PPSAnalyzerDataSource.stop", "kind": "function", "doc": "<p>Stops the PPS monitoring thread and releases resources.</p>\n\n<p>Disables all active TSUs, closes the UART connection if open,\nand calls the parent class's <code>stop</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.syslog", "modulename": "syncarium.tui.core.dsources.syslog", "kind": "module", "doc": "<p>===============================================================================\n File Name   : syslog.py\n Project     : Syncarium - Intelligent Timing Platform Toolkit\n Description : System Log Data Source Class.\n Author      : PhD Student Alberto Ortega Ruiz, PhD Student V\u00edctor V\u00e1zquez, University of Granada\n Created     : 2025-05-02\n Version     : 1.0.0</p>\n\n<h1 id=\"license-gplv3\"> License     : GPLv3</h1>\n"}, {"fullname": "syncarium.tui.core.dsources.syslog.SysLogDataSource", "modulename": "syncarium.tui.core.dsources.syslog", "qualname": "SysLogDataSource", "kind": "class", "doc": "<p>A data source that monitors the system log and extracts metrics using a regex pattern.</p>\n\n<p>This subclass of <code>DataSource</code> reads from <code>/var/log/syslog</code>, applies a regular expression\nto each new line, and sends extracted named groups as metrics to a shared queue.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>pattern</strong> (<code>str</code>): Regular expression pattern with named groups used to extract metrics.</li>\n</ul>\n", "bases": "syncarium.tui.core.dsources.datasource.DataSource"}, {"fullname": "syncarium.tui.core.dsources.syslog.SysLogDataSource.__init__", "modulename": "syncarium.tui.core.dsources.syslog", "qualname": "SysLogDataSource.__init__", "kind": "function", "doc": "<p>Initializes a <code>SysLogDataSource</code> with a regex pattern for metric extraction.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>name</strong> (<code>str</code>): Identifier for the data source.</li>\n<li><strong>queue</strong> (<code>multiprocessing.Queue</code>): Queue for sending extracted metrics.</li>\n<li><strong>event</strong> (<code>multiprocessing.synchronize.Event</code>): Event used to control the process lifecycle.</li>\n<li><strong>pattern</strong> (<code>str</code>): Regular expression pattern with named groups to match log lines.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">bound</span> <span class=\"n\">method</span> <span class=\"n\">BaseContext</span><span class=\"o\">.</span><span class=\"n\">Queue</span> <span class=\"n\">of</span> <span class=\"o\">&lt;</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">DefaultContext</span> <span class=\"nb\">object</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">synchronize</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "syncarium.tui.core.dsources.syslog.SysLogDataSource.pattern", "modulename": "syncarium.tui.core.dsources.syslog", "qualname": "SysLogDataSource.pattern", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.core.dsources.syslog.SysLogDataSource.follow", "modulename": "syncarium.tui.core.dsources.syslog", "qualname": "SysLogDataSource.follow", "kind": "function", "doc": "<p>Generator that yields new lines appended to a file in real time.</p>\n\n<p>Mimics the behavior of <code>tail -f</code>, continuously reading new lines from the end\nof the file until the stop event is triggered.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>file</strong> (<code>TextIO</code>): File object to monitor.</li>\n</ul>\n\n<h3 id=\"yields\">Yields</h3>\n\n<ul>\n<li><strong>str</strong>: New lines appended to the file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\">file: &lt;class &#x27;TextIO&#x27;&gt;</span><span class=\"return-annotation\">) -> <span class=\"n\">Generator</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.syslog.SysLogDataSource.run", "modulename": "syncarium.tui.core.dsources.syslog", "qualname": "SysLogDataSource.run", "kind": "function", "doc": "<p>Starts the log monitoring process.</p>\n\n<p>Opens <code>/var/log/syslog</code>, follows it in real time, and applies the regex pattern\nto each new line. If a match is found, extracts named groups and sends them\nas timestamped metrics to the shared queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.dsources.syslog.SysLogDataSource.source_features", "modulename": "syncarium.tui.core.dsources.syslog", "qualname": "SysLogDataSource.source_features", "kind": "function", "doc": "<p>Returns a list of features specific to this data source.</p>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>List[str]</strong>: A list containing the regex pattern used for metric extraction.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra", "modulename": "syncarium.tui.core.exp_orchestra", "kind": "module", "doc": "<h1 id=\"exp_orchestrapy\">exp_orchestra.py</h1>\n\n<p><strong>Project</strong>: Syncarium \u2013 Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: Syncarium ExpOrchestra<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, University of Granada<br />\n<strong>Created</strong>: 2025-06-27<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra", "kind": "class", "doc": "<p>A tool for managing and executing laboratory experiments involving PTP synchronization,\ntraffic generation, and data extraction.</p>\n\n<h3 id=\"attributes\">Attributes:</h3>\n\n<ul>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Utility tools for view-related operations.</li>\n<li><strong>synccore</strong> (<code>SyncCore</code>): Precision Time Protocol manager.</li>\n<li><strong>loadgen</strong> (<code>LoadGen</code>): Traffic generator manager.</li>\n<li><strong>dataex</strong> (<code>DataEx</code>): Data extractor tool instance.</li>\n<li><strong>exp_dir</strong> (<code>Path</code>): Path to the directory containing experiment definitions.</li>\n<li><strong>output_dir</strong> (<code>Path</code>): Path to the directory for storing experiment outputs.</li>\n<li><strong>state</strong> (<code>Any</code>): Current state of the experiment.</li>\n<li><strong>fn</strong> (<code>Optional[str]</code>): Name of the loaded experiment file.</li>\n<li><strong>duration</strong> (<code>Optional[int]</code>): Total duration of the experiment.</li>\n<li><strong>stl_start</strong> (<code>Optional[float]</code>): Start timestamp of the STL process.</li>\n<li><strong>stl_duration</strong> (<code>Optional[int]</code>): Duration of the STL process.</li>\n<li><strong>dataex_start</strong> (<code>Optional[float]</code>): Start timestamp of the data extractor.</li>\n<li><strong>dataex_duration</strong> (<code>Optional[int]</code>): Duration of the data extractor.</li>\n<li><strong>synccore_start</strong> (<code>Optional[float]</code>): Start timestamp of the PTP process.</li>\n<li><strong>synccore_stop_at_end</strong> (<code>Optional[bool]</code>): Whether to stop PTP at the end of the experiment.</li>\n<li><strong>hash_id</strong> (<code>Optional[str]</code>): Unique identifier for the experiment.</li>\n<li><strong>start_ts</strong> (<code>Optional[float]</code>): Timestamp when the experiment starts.</li>\n<li><strong>exp_output_dir</strong> (<code>Optional[Path]</code>): Path to the specific output directory for the experiment.</li>\n<li><strong>logger</strong> (<code>Any</code>): Logger instance for logging experiment events.</li>\n<li><strong>output_log</strong> (<code>Optional[Path]</code>): Path to the output log file.</li>\n<li><strong>output_yaml</strong> (<code>Optional[Path]</code>): Path to the output YAML file.</li>\n<li><strong>stl_fn</strong> (<code>Optional[str]</code>): Name of the STL script file.</li>\n<li><strong>dataex_datasources</strong> (<code>Any</code>): Data sources used by the extractor.</li>\n<li><strong>synccore_clients</strong> (<code>Any</code>): PTP clients involved in the experiment.</li>\n<li><strong>telegram_bot_token</strong> (<code>str</code>): Telegram bot token used for sending notifications.</li>\n<li><strong>telegram_chat_id</strong> (<code>str</code>): Telegram chat ID used for sending notifications.</li>\n<li><strong>thread</strong> (<code>Optional[threading.Thread]</code>): Thread handling the experiment execution.</li>\n<li><strong>batch_thread</strong> (<code>Optional[threading.Thread]</code>): Thread handling batch execution.</li>\n<li><strong>stop_event</strong> (<code>threading.Event</code>): Event used to signal experiment interruption.</li>\n<li><strong>total_repetitions</strong> (<code>Optional[int]</code>): Total number of repetitions in batch mode.</li>\n<li><strong>actual_repetition</strong> (<code>Optional[int]</code>): Current repetition number in batch mode.</li>\n<li><strong>delay_between</strong> (<code>Optional[int]</code>): Delay in seconds between repetitions.</li>\n</ul>\n"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.__init__", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.__init__", "kind": "function", "doc": "<p>Initializes the ExpOrchestra with the required components for experiment execution.</p>\n\n<p>Sets up references to the PTP manager, traffic generator, data extractor, and view tools.\nAlso initializes internal state variables, directory paths, logging configuration,\nand timing metadata for managing experiment lifecycle.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>synccore</strong> (<code>SyncCore</code>): Instance responsible for managing PTP synchronization.</li>\n<li><strong>loadgen</strong> (<code>LoadGen</code>): Instance responsible for traffic generation.</li>\n<li><strong>dataex</strong> (<code>DataEx</code>): Instance responsible for extracting experiment data.</li>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Utility tools for rendering views in the console.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">synccore</span><span class=\"p\">:</span> <span class=\"n\">syncarium</span><span class=\"o\">.</span><span class=\"n\">tui</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">sync_core</span><span class=\"o\">.</span><span class=\"n\">SyncCore</span>,</span><span class=\"param\">\t<span class=\"n\">loadgen</span><span class=\"p\">:</span> <span class=\"n\">syncarium</span><span class=\"o\">.</span><span class=\"n\">tui</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">load_gen</span><span class=\"o\">.</span><span class=\"n\">LoadGen</span>,</span><span class=\"param\">\t<span class=\"n\">dataex</span><span class=\"p\">:</span> <span class=\"n\">syncarium</span><span class=\"o\">.</span><span class=\"n\">tui</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">data_ex</span><span class=\"o\">.</span><span class=\"n\">DataEx</span>,</span><span class=\"param\">\t<span class=\"n\">vt</span><span class=\"p\">:</span> <span class=\"n\">syncarium</span><span class=\"o\">.</span><span class=\"n\">tui</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">viewtools</span><span class=\"o\">.</span><span class=\"n\">ViewTools</span></span>)</span>"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.vt", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.vt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.utils.viewtools.ViewTools"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.synccore", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.synccore", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.core.sync_core.SyncCore"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.loadgen", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.loadgen", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.core.load_gen.LoadGen"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.dataex", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.dataex", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.core.data_ex.DataEx"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.fn", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.fn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.hash_id", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.hash_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.start_ts", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.start_ts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.duration", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.state", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.thread", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.thread", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Thread | None"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.batch_thread", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.batch_thread", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Thread | None"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.stop_event", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.stop_event", "kind": "variable", "doc": "<p></p>\n", "annotation": ": threading.Event"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.exp_dir", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.exp_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.output_dir", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.output_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.exp_output_dir", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.exp_output_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pathlib.Path]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.logger", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.logger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.output_log", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.output_log", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pathlib.Path]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.output_yaml", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.output_yaml", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pathlib.Path]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.stl_fn", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.stl_fn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.dataex_datasources", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.dataex_datasources", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.synccore_clients", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.synccore_clients", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Any"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.stl_start", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.stl_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.stl_duration", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.stl_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.dataex_start", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.dataex_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.dataex_duration", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.dataex_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.synccore_start", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.synccore_start", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.synccore_stop_at_end", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.synccore_stop_at_end", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.total_repetitions", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.total_repetitions", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.actual_repetition", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.actual_repetition", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.delay_between", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.delay_between", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.telegram_bot_token", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.telegram_bot_token", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.telegram_chat_id", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.telegram_chat_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.main_menu", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.main_menu", "kind": "function", "doc": "<p>Displays and manages the interactive ExpOrchestra menu.</p>\n\n<p>Continuously renders a terminal-based menu using <code>ViewTools</code>, allowing the user to manage\nthe experiment lifecycle, including PTP synchronization, STL traffic generation, and data extraction.</p>\n\n<p>The loop runs until the user selects <strong>\"\u274c Exit\"</strong> or interrupts with <strong>Ctrl+C</strong>.</p>\n\n<h3 id=\"menu-options\">Menu Options:</h3>\n\n<ul>\n<li>\u2697\ufe0f Load Experiment \u2192 <code>load_experiment</code></li>\n<li>\u2697\ufe0f Launch Experiment \u2192 <code>launch_experiment_bg</code></li>\n<li>\ud83c\udfed Launch Experiment Batch \u2192 <code>launch_experiment_batch</code></li>\n<li>\ud83d\uded1\u2697\ufe0f Stop Experiment \u2192 <code>stop_experiment</code></li>\n<li>\ud83d\uded1\ud83c\udfed Stop Experiment Batch \u2192 <code>stop_experiment_batch</code></li>\n<li>\u23f3 Show Progress \u2192 <code>show_progress</code></li>\n<li>\ud83d\udcc4 Show Experiment Status \u2192 <code>show_experiment</code></li>\n<li>\ud83d\udcc4 Show Extracted Data \u2192 <code>show_extracted_data</code></li>\n<li>\ud83d\udd04 Refresh View \u2192 Refreshes the current view without taking action</li>\n<li>\u274c Exit \u2192 Exits the menu</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.load_experiment", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.load_experiment", "kind": "function", "doc": "<p>Loads an experiment configuration from a YAML file and initializes its components.</p>\n\n<p>If no file is provided, prompts the user to select one from the available YAML files\nin the configuration directory. Parses the file to extract metadata, timing parameters,\nand component configurations for traffic generation, data extraction, and PTP synchronization.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>file_cfg</strong> (<code>Optional[str]</code>): Name of the YAML configuration file. If <code>None</code>, the user is prompted to select one.</li>\n<li><strong>quiet</strong> (<code>bool</code>): If <code>True</code>, suppresses console output. Defaults to <code>False</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_cfg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.interrupted_sleep", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.interrupted_sleep", "kind": "function", "doc": "<p>Sleeps in small intervals to allow interruption via a stop event.</p>\n\n<p>This method is useful for long-running operations that need to be interruptible,\nsuch as experiment delays or scheduled actions.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>seconds</strong> (<code>float</code>): Total duration to sleep.</li>\n<li><strong>stop_event</strong> (<code>threading.Event</code>): Event used to interrupt the sleep early.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">stop_event</span><span class=\"p\">:</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.launch_experiment_bg", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.launch_experiment_bg", "kind": "function", "doc": "<p>Starts the experiment in a background thread and sets up logging.</p>\n\n<p>Initializes a timestamped logger with a rotating file handler, then launches\nthe experiment asynchronously using a daemon thread. Any exceptions during\nexecution are logged automatically.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.launch_experiment", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.launch_experiment", "kind": "function", "doc": "<p>Starts the experiment asynchronously in a background thread and sets up logging.</p>\n\n<p>Initializes a timestamped logger with a rotating file handler to capture experiment logs.\nThen launches the experiment in a daemon thread, allowing it to run in the background.\nAny exceptions raised during execution are automatically logged.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>quiet</strong> (<code>bool</code>): If <code>True</code>, suppresses console output. Defaults to <code>False</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.launch_experiment_batch", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.launch_experiment_batch", "kind": "function", "doc": "<p>Prompts the user to select an experiment and launches it multiple times in the background.</p>\n\n<p>For each repetition, the experiment is reloaded to regenerate a unique ID and output paths.\nA delay is applied between each execution. The batch runs asynchronously in a daemon thread\nand can be interrupted via <code>stop_event</code>.</p>\n\n<p>The user is prompted to configure:</p>\n\n<ul>\n<li>Number of repetitions</li>\n<li>Delay between repetitions (in seconds)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.stop_experiment", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.stop_experiment", "kind": "function", "doc": "<p>Stops all components of a running experiment and updates its state.</p>\n\n<p>Attempts to stop PTP synchronization, data extraction, and STL traffic generation\nif they were configured. Any errors encountered during shutdown are reported.\nThe experiment state is updated to <code>\"Stopped\"</code> once all components are terminated.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>extra_indent</strong> (<code>int</code>): Indentation level for console messages. Defaults to <code>0</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.stop_experiment_batch", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.stop_experiment_batch", "kind": "function", "doc": "<p>Stops all running experiments in the current batch.</p>\n\n<p>Signals the stop event to interrupt any ongoing or scheduled experiment launches.\nAlso calls <code>stop_experiment()</code> to clean up the currently running experiment, and\nwaits for the batch thread to finish execution.</p>\n\n<p>A Telegram notification is sent to indicate the batch was stopped.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>extra_indent</strong> (<code>int</code>): Indentation level for console messages. Defaults to <code>0</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.show_progress", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.show_progress", "kind": "function", "doc": "<p>Displays real-time progress of the experiment.</p>\n\n<p>Console messages are used to notify the user if no experiment is running.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.show_experiment", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.show_experiment", "kind": "function", "doc": "<p>Displays the real-time log output of the experiment.</p>\n\n<p>If no experiment is currently running, a warning message is shown.\nOtherwise, the log file is streamed live in the console.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.show_extracted_data", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.show_extracted_data", "kind": "function", "doc": "<p>Displays the real-time log output of the data extraction process.</p>\n\n<p>If no data extraction process is active, a warning message is shown.\nOtherwise, the log file is streamed live in the console.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.clean_experiment", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.clean_experiment", "kind": "function", "doc": "<p>Resets all internal variables and clears the previously loaded experiment.</p>\n\n<p>This method resets experiment metadata, output paths, logging configuration,\nand component-specific parameters to prepare the tool for a new experiment.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>quiet</strong> (<code>bool</code>): If <code>True</code>, suppresses console output. Defaults to <code>False</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.exp_orchestra.ExpOrchestra.notify_telegram_bot", "modulename": "syncarium.tui.core.exp_orchestra", "qualname": "ExpOrchestra.notify_telegram_bot", "kind": "function", "doc": "<p>Sends a message to the configured Telegram bot.</p>\n\n<p>Constructs and sends a POST request to the Telegram Bot API using the stored\nbot token and chat ID. If the request fails, an error message is shown in the console.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>message</strong> (<code>str</code>): Text message to send via Telegram.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.load_gen", "modulename": "syncarium.tui.core.load_gen", "kind": "module", "doc": "<h1 id=\"load_genpy\">load_gen.py</h1>\n\n<p><strong>Project</strong>: Syncarium \u2013 Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: Load Generator configurations for TUI<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, University of Granada<br />\n<strong>Created</strong>: 2025-05-28<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen", "kind": "class", "doc": "<p>Manages load generator configurations and scripts within the Syncarium environment.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Utility tools for rendering views in the console.</li>\n<li><strong>load_dir</strong> (<code>Path</code>): Path to the directory containing load configuration files.</li>\n<li><strong>dpdk_driver_dir</strong> (<code>Path</code>): Path to the DPDK driver directory.</li>\n<li><strong>scripts_dir</strong> (<code>Path</code>): Path to the directory containing shell scripts.</li>\n<li><strong>loadgen_name</strong> (<code>Optional[str]</code>): Name of the selected load generator.</li>\n<li><strong>loadgen_ver</strong> (<code>Optional[str]</code>): Version of the selected load generator.</li>\n<li><strong>loadgen_dir</strong> (<code>Optional[Path]</code>): Path to the load generator's server working directory.</li>\n<li><strong>loadgen_server_dir</strong> (<code>Optional[Path]</code>): Path to the load generator's server working directory.</li>\n<li><strong>loadgen_client_dir</strong> (<code>Optional[Path]</code>): Path to the STL client directory.</li>\n<li><strong>stl_filename</strong> (<code>Optional[str]</code>): Name of the STL script file.</li>\n<li><strong>stl_args</strong> (<code>Optional[str]</code>): Arguments passed to the STL script.</li>\n<li><strong>stl_process</strong> (<code>Optional[object]</code>): Process object for the STL execution.</li>\n<li><strong>stl_start_time</strong> (<code>Optional[float]</code>): Timestamp when the STL process started.</li>\n<li><strong>stl_duration</strong> (<code>Optional[float]</code>): Duration of the STL process.</li>\n<li><strong>stl_state</strong> (<code>Optional[str]</code>): Current state of the STL process.</li>\n<li><strong>stl_env</strong> (<code>Optional[Dict]</code>): Environment variables for the STL process.</li>\n</ul>\n"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.__init__", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.__init__", "kind": "function", "doc": "<p>Initializes a new instance of LoadGen.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Utility tools for rendering views in the console.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vt</span><span class=\"p\">:</span> <span class=\"n\">syncarium</span><span class=\"o\">.</span><span class=\"n\">tui</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">viewtools</span><span class=\"o\">.</span><span class=\"n\">ViewTools</span></span>)</span>"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.vt", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.vt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.utils.viewtools.ViewTools"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.load_dir", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.load_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.dpdk_dir", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.dpdk_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.dpdk_profile_dir", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.dpdk_profile_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.scripts_dir", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.scripts_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.loadgen_name", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.loadgen_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.loadgen_ver", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.loadgen_ver", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.loadgen_dir", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.loadgen_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pathlib.Path]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.loadgen_server_dir", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.loadgen_server_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pathlib.Path]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.loadgen_client_dir", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.loadgen_client_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[pathlib.Path]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.stl_filename", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.stl_filename", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.stl_args", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.stl_args", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.stl_process", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.stl_process", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[object]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.stl_start_time", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.stl_start_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.stl_duration", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.stl_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.stl_state", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.stl_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.stl_env", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.stl_env", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Dict]"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.main_menu", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.main_menu", "kind": "function", "doc": "<p>Displays and manages the interactive load generator management menu.</p>\n\n<p>Continuously renders a terminal-based menu using <code>ViewTools</code>, allowing the user to manage\nTRex-based load generation tasks such as loading drivers, starting/stopping servers,\nlaunching STL scripts, and switching load generators. The loop runs until the user selects\n<strong>\"\u274c Exit\"</strong> or interrupts with <strong>Ctrl+C</strong>.</p>\n\n<h3 id=\"menu-options-for-trex\">Menu Options (for TRex)</h3>\n\n<ul>\n<li>\ud83d\udce6 Load DPDK Driver \u2192 <code>load_dpdk_driver</code></li>\n<li>\ud83d\udda5\ufe0f Start TRex Server \u2192 <code>start_trex_server</code></li>\n<li>\ud83d\uded1 Stop TRex Server \u2192 <code>stop_trex_server</code></li>\n<li>\ud83d\uddbc\ufe0f Start TRex TUI \u2192 <code>start_trex_tui</code></li>\n<li>\ud83d\ude80 Start STL Program \u2192 <code>start_stl_program</code></li>\n<li>\ud83d\uded1 Stop STL Program \u2192 <code>stop_stl_program</code></li>\n<li>\ud83d\udea6 Select another Traffic Generator \u2192 <code>select_load_gen</code></li>\n<li>\ud83d\udd04 Refresh view \u2192 does nothing</li>\n<li>\u274c Exit \u2192 exits the menu</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Only TRex-based load generators are currently supported.</li>\n<li>Graceful exit is handled via <strong>Ctrl+C</strong>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.load_dpdk_driver", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.load_dpdk_driver", "kind": "function", "doc": "<p>Loads the specified DPDK driver and binds network ports using TRex's NIC binding script.</p>\n\n<p>If no configuration file is provided, the user is prompted to select one from the available YAML files.\nThe selected file must contain the driver name, number of ports, and PCI addresses for each port.\nThe function uses <code>modprobe</code> to load the driver and executes <code>dpdk_nic_bind.py</code> to bind the ports.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>file_cfg</strong> (<code>Optional[str]</code>): Name of the YAML configuration file to use. If <code>None</code>, prompts the user to select one.</li>\n</ul>\n\n<h3 id=\"yaml-configuration-requirements\">YAML Configuration Requirements</h3>\n\n<ul>\n<li><code>dpdk_driver</code>: Name of the DPDK driver (e.g., <code>igb_uio</code>, <code>vfio-pci</code>)</li>\n<li><code>n_ports</code>: Number of ports to bind</li>\n<li><code>pci_bus_port{i}</code>: PCI address for each port, where <code>i</code> is the port index</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_cfg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.start_trex_server", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.start_trex_server", "kind": "function", "doc": "<p>Starts the TRex server using the specified configuration file.</p>\n\n<p>If a TRex server is already running, prompts the user to stop it before launching a new one.\nPrepares the system environment (e.g., hugepages), selects a configuration file (if not provided),\nand launches the TRex server in software mode.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>sleep_seconds</strong> (<code>int</code>): Seconds to wait after launching the server to allow initialization. Defaults to <code>10</code>.</li>\n<li><strong>file_cfg</strong> (<code>Optional[str]</code>): Name of the TRex YAML configuration file. If <code>None</code>, prompts the user to select one.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>Uses <code>config_hugepages.sh</code> to prepare hugepages before launching.</li>\n<li>Launches TRex with <code>--software</code> and <code>--no-scapy-server</code> flags.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sleep_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">file_cfg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.stop_trex_server", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.stop_trex_server", "kind": "function", "doc": "<p>Stops any running TRex server processes.</p>\n\n<p>Checks for active TRex server instances using <code>pgrep</code>, prompts the user for confirmation,\nand terminates each detected process using <code>kill -9</code>. Displays relevant messages for success,\ncancellation, or errors during termination.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.start_trex_tui", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.start_trex_tui", "kind": "function", "doc": "<p>Launches the TRex Text User Interface (TUI) console.</p>\n\n<p>Verifies that a TRex server process is running before attempting to launch the TUI.\nExecutes the <code>trex-console</code> command within the TRex server directory using the configured environment.</p>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>If no TRex server is running, the TUI will not be launched.</li>\n<li>Uses the environment defined in <code>stl_env</code> to execute the console.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.start_stl_program", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.start_stl_program", "kind": "function", "doc": "<p>Launches an STL load generation program based on a YAML configuration file.</p>\n\n<p>This method ensures no other STL process is currently running, selects or loads\na configuration file, parses the STL script and its arguments, and starts the\nprocess with the appropriate environment variables.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>file_cfg</strong> (<code>Optional[str]</code>): Name of the YAML configuration file. If <code>None</code>, the user is prompted to select one.</li>\n<li><strong>labt_duration</strong> (<code>Optional[int]</code>): Optional override for the duration of the STL program.</li>\n<li><strong>labt_output</strong> (<code>Optional[str]</code>): Optional output path or identifier for the STL program.</li>\n<li><strong>logger</strong>: Logger instance used for logging messages. Defaults to <code>None</code>.</li>\n<li><strong>extra_indent</strong> (<code>int</code>): Additional indentation level for console messages. Defaults to <code>0</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_cfg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">labt_duration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">labt_output</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.stop_stl_program", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.stop_stl_program", "kind": "function", "doc": "<p>Stops the currently running STL load generation program.</p>\n\n<p>Verifies if an STL process is active, optionally prompts the user for confirmation,\nterminates the process, and updates the internal state accordingly.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>logger</strong>: Logger instance used for logging messages. Defaults to <code>None</code>.</li>\n<li><strong>preconfirmation</strong> (<code>Optional[bool]</code>): If <code>True</code>, skips the confirmation prompt. Defaults to_indent** (<code>int</code>): Additional indentation level for console messages. Defaults to <code>0</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">preconfirmation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.load_gen.LoadGen.select_load_gen", "modulename": "syncarium.tui.core.load_gen", "qualname": "LoadGen.select_load_gen", "kind": "function", "doc": "<p>Prompts the user to select a load generator and sets up its environment.</p>\n\n<p>Lists available load generator folders, allows the user to choose one,\nand configures internal paths and environment variables accordingly.\nIf the selected generator version differs from the current one, stops any running TRex server.</p>\n\n<h3 id=\"returns\">Returns:</h3>\n\n<ul>\n<li><code>Optional[bool]</code>: <code>True</code> if a load generator was successfully selected, <code>False</code> otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.plat_init", "modulename": "syncarium.tui.core.plat_init", "kind": "module", "doc": "<h1 id=\"plat_initpy\">plat_init.py</h1>\n\n<p><strong>Project</strong>: Syncarium - Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: Platform Initialization for TUI<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, University of Granada<br />\n<strong>Created</strong>: 2025-05-22<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit", "kind": "class", "doc": "<p>Sets up the platform setup environment for Syncarium.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Utility tools for rendering views in the console.</li>\n<li><strong>config_dir</strong> (<code>Path</code>): Path to the directory containing platform setup files.</li>\n<li><strong>scripts_dir</strong> (<code>Path</code>): Path to the directory containing shell scripts.</li>\n<li><strong>loaded_namespaces</strong> (<code>List[str]</code>): List of namespaces that have been loaded.</li>\n</ul>\n"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.__init__", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.__init__", "kind": "function", "doc": "<p>Initializes a new instance of <code>PlatInit</code>.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Instance of utility tools for rendering views in the console.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vt</span><span class=\"p\">:</span> <span class=\"n\">syncarium</span><span class=\"o\">.</span><span class=\"n\">tui</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">viewtools</span><span class=\"o\">.</span><span class=\"n\">ViewTools</span></span>)</span>"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.vt", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.vt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.utils.viewtools.ViewTools"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.config_dir", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.config_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.scripts_dir", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.scripts_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.loaded_namespaces", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.loaded_namespaces", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[str]"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.main_menu", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.main_menu", "kind": "function", "doc": "<p>Displays and manages the interactive main menu for platform setup tasks.</p>\n\n<p>Continuously renders a terminal-based menu using InquirerPy, allowing the user to:</p>\n\n<ul>\n<li>Load device drivers</li>\n<li>Manage Linux namespaces</li>\n<li>Configure PPS I/O</li>\n</ul>\n\n<p>The menu loop runs until the user selects <strong>\"Exit\"</strong> or interrupts the process with <strong>Ctrl+C</strong>.</p>\n\n<h3 id=\"menu-options\">Menu Options:</h3>\n\n<ul>\n<li>\ud83d\udce6 Load Device Driver \u2192 <code>load_device_driver</code></li>\n<li>\ud83c\udf10 Start Linux Namespaces \u2192 <code>start_namespaces</code></li>\n<li>\ud83d\uded1 Stop Linux Namespaces \u2192 <code>stop_namespaces</code></li>\n<li>\ud83d\udccd Configure PPS I/O \u2192 <code>config_pps_io</code></li>\n<li>\ud83d\udd04 Refresh View \u2192 refreshes the display (no action)</li>\n<li>\u274c Exit \u2192 exits the menu loop</li>\n</ul>\n\n<h3 id=\"notes\">Notes:</h3>\n\n<ul>\n<li>Graceful termination is supported via <strong>Ctrl+C</strong>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.load_device_driver", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.load_device_driver", "kind": "function", "doc": "<p>Loads a device driver from the available shell scripts in the scripts directory.</p>\n\n<p>Searches for scripts matching the pattern <code>devdriver_*.sh</code> within <code>scripts_dir</code>.\nIf any are found, presents them in an interactive menu using InquirerPy for selection.\nThe selected script is made executable and then executed.</p>\n\n<p>Displays appropriate messages for:</p>\n\n<ul>\n<li>Missing scripts</li>\n<li>User cancellation</li>\n<li>Execution success or failure</li>\n</ul>\n\n<h3 id=\"raises\">Raises:</h3>\n\n<ul>\n<li><strong>subprocess.CalledProcessError</strong>: If the script execution fails.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.load_namespaces", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.load_namespaces", "kind": "function", "doc": "<p>Loads a network namespace configuration from a YAML file.</p>\n\n<p>If <code>file_cfg</code> is provided, it is used directly. Otherwise, the method searches\nfor YAML files in <code>config_dir</code> matching the pattern <code>*.yaml</code>, and prompts the user\nto select one interactively. The selected file is parsed and its contents are stored\nin <code>loaded_namespaces</code>.</p>\n\n<p>The configuration must contain a top-level key <code>\"namespaces\"</code> with a dictionary\nof namespace definitions. If no valid configuration is found, the operation is\naborted gracefully.</p>\n\n<h3 id=\"parameters\">Parameters:</h3>\n\n<ul>\n<li><strong>file_cfg</strong> (<code>Optional[str]</code>): Optional filename of the YAML configuration to load.</li>\n</ul>\n\n<h3 id=\"returns\">Returns:</h3>\n\n<ul>\n<li><strong>bool</strong>: <code>True</code> if the configuration was successfully loaded and validated; <code>False</code> otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_cfg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.start_namespaces", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.start_namespaces", "kind": "function", "doc": "<p>Starts Linux network namespaces based on a selected YAML configuration file.</p>\n\n<p>This method performs the following steps:</p>\n\n<ul>\n<li>Checks if any namespaces are already running and optionally stops them.</li>\n<li>Loads a namespace configuration from a YAML file.</li>\n<li>Iterates through the configuration and applies each namespace setup using system commands.</li>\n</ul>\n\n<p>Each namespace must define:</p>\n\n<ul>\n<li>A name</li>\n<li>An interface</li>\n<li>An IP/mask</li>\n</ul>\n\n<p>Optionally, a gateway can be defined. IPv6 is disabled on each configured interface.</p>\n\n<p>If any required fields are missing, the corresponding namespace setup is skipped.</p>\n\n<h3 id=\"parameters\">Parameters:</h3>\n\n<ul>\n<li><strong>file_cfg</strong> (<code>Optional[str]</code>): Optional filename of the YAML configuration to load.<br />\nIf not provided, the user will be prompted to select one.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_cfg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.stop_namespaces", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.stop_namespaces", "kind": "function", "doc": "<p>Stops all currently running Linux network namespaces.</p>\n\n<p>This method performs the following steps:</p>\n\n<ul>\n<li>Lists active namespaces using <code>ip netns list</code>.</li>\n<li>Optionally prompts the user for confirmation before deletion.</li>\n<li>Iterates through each namespace and deletes it using system commands.</li>\n<li>Displays progress, success, and error messages accordingly.</li>\n</ul>\n\n<h3 id=\"parameters\">Parameters:</h3>\n\n<ul>\n<li><strong>ask_confirm</strong> (<code>bool</code>): Whether to prompt the user for confirmation before stopping namespaces.<br />\nDefaults to <code>True</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ask_confirm</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.plat_init.PlatInit.config_pps_io", "modulename": "syncarium.tui.core.plat_init", "qualname": "PlatInit.config_pps_io", "kind": "function", "doc": "<p>Configures PPS (Pulse Per Second) I/O for a selected network namespace.</p>\n\n<p>The user selects a namespace from the loaded configuration. PPS settings are applied\nbased on the detected hardware type.</p>\n\n<h3 id=\"supported-hardware\">Supported Hardware:</h3>\n\n<ul>\n<li><strong>OCP-TAP TimeStick</strong>: No configuration required. PPS operates in OUT mode by default.</li>\n<li><strong>Intel 710</strong>: Uses <code>config_pps_Intel710.sh</code>.</li>\n<li><strong>Intel 810</strong>: Uses <code>config_pps_Intel810.sh</code>.</li>\n</ul>\n\n<p>For Intel hardware, the configuration script is executed with the namespace name,\ninterface, and PPS mode as arguments.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.sync_core", "modulename": "syncarium.tui.core.sync_core", "kind": "module", "doc": "<h1 id=\"sync_corepy\">sync_core.py</h1>\n\n<p><strong>Project</strong>: Syncarium - Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: Synchronization Core for TUI<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, University of Granada<br />\n<strong>Created</strong>: 2025-05-22<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore", "kind": "class", "doc": "<p>Handles Precision Time Protocol (PTP) configuration and management tasks\nwithin the Syncarium environment.</p>\n\n<h3 id=\"attributes\">Attributes:</h3>\n\n<ul>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Utility class for rendering formatted views in the console.</li>\n<li><strong>ptp_profile_dir</strong> (<code>Path</code>): Path to the directory containing ptp4l-specific configuration files.</li>\n<li><strong>log_dir</strong> (<code>Path</code>): Path to the directory where log files are stored.</li>\n<li><strong>print_lock</strong> (<code>Lock</code>): Thread lock used to synchronize console output across threads.</li>\n<li><strong>loaded_clients</strong> (<code>Dict[str, Dict[str, str]]</code>): Dictionary containing loaded PTP client configurations.</li>\n</ul>\n"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.__init__", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.__init__", "kind": "function", "doc": "<p>Initializes the SyncCore instance with required configuration paths and utilities.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>vt</strong> (<code>utils.ViewTools</code>): Instance of the view rendering utility used for console output.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vt</span><span class=\"p\">:</span> <span class=\"n\">syncarium</span><span class=\"o\">.</span><span class=\"n\">tui</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">viewtools</span><span class=\"o\">.</span><span class=\"n\">ViewTools</span></span>)</span>"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.vt", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.vt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.utils.viewtools.ViewTools"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.ptp_profile_dir", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.ptp_profile_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.log_dir", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.log_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.print_lock", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.print_lock", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &lt;built-in function allocate_lock&gt;"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.loaded_clients", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.loaded_clients", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Dict[str, str]]"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.main_menu", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.main_menu", "kind": "function", "doc": "<p>Displays and manages the interactive terminal-based menu for PTP operations.</p>\n\n<p>Continuously renders a menu using InquirerPy, allowing the user to perform various\nPTP-related actions such as starting/stopping services, viewing logs, pinging the server,\nand refreshing the interface. The loop continues until the user selects <strong>\"\u274c Exit\"</strong>\nor interrupts the process using <strong>Ctrl+C</strong>.</p>\n\n<h3 id=\"menu-options\">Menu Options:</h3>\n\n<ul>\n<li>\u23f1\ufe0f Start PTP \u2192 <code>start_ptp</code></li>\n<li>\ud83d\uded1 Stop PTP \u2192 <code>stop_ptp</code></li>\n<li>\ud83d\udcc4 Show PTP Logs \u2192 <code>print_ptp_log</code></li>\n<li>\ud83d\udce1 Ping PTP Server \u2192 <code>ping_server</code></li>\n<li>\ud83d\udd04 Refresh View \u2192 refreshes the interface without performing any action</li>\n<li>\u274c Exit \u2192 exits the menu loop</li>\n</ul>\n\n<h3 id=\"notes\">Notes:</h3>\n\n<ul>\n<li>Graceful exit is supported via <strong>Ctrl+C</strong> interruption.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.load_clients", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.load_clients", "kind": "function", "doc": "<p>Loads and validates PTP client configurations from a YAML file.</p>\n\n<p>If no file is specified, the user is prompted to select one interactively from the available\nYAML files in the configuration directory. Each client's network namespace is validated\nagainst the system. Clients with missing namespaces are skipped and reported.</p>\n\n<p>The YAML file must contain a <code>ptp_clients</code> section with client definitions.</p>\n\n<h3 id=\"args\">Args:</h3>\n\n<ul>\n<li><strong>file_cfg</strong> (<code>Optional[str]</code>): Name of the YAML configuration file to load. If <code>None</code>, prompts the user interactively.</li>\n<li><strong>logger</strong> (<code>Optional[Any]</code>): Logger instance used for logging messages. Defaults to <code>None</code>.</li>\n<li><strong>extra_indent</strong> (<code>int</code>): Additional indentation level for console messages. Defaults to <code>0</code>.</li>\n<li><strong>quiet</strong> (<code>bool</code>): If <code>True</code>, suppresses console output. Defaults to <code>True</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns:</h3>\n\n<ul>\n<li><code>bool</code>: <code>True</code> if clients were successfully loaded and validated; <code>False</code> otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">file_cfg</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.start_ptp", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.start_ptp", "kind": "function", "doc": "<p>Launches <code>ptp4l</code> processes for all configured clients.</p>\n\n<p>If enabled, checks for existing <code>ptp4l</code> processes and prompts the user to stop them before starting new ones.\nIf no clients are currently loaded, attempts to load them from configuration files.</p>\n\n<p>For each valid client, starts a <code>ptp4l</code> process within its corresponding network namespace using <code>sudo</code>,\nwith output redirected to a dedicated log file. Displays process information including PID, log path, and command.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>logger</strong> (<code>Optional[Any]</code>): Logger instance for logging messages. Defaults to <code>None</code>.</li>\n<li><strong>extra_indent</strong> (<code>int</code>): Indentation level for console messages. Defaults to <code>0</code>.</li>\n<li><strong>stop</strong> (<code>bool</code>): Whether to stop existing <code>ptp4l</code> processes before launching new ones. Defaults to <code>True</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">stop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.stop_ptp", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.stop_ptp", "kind": "function", "doc": "<p>Terminates all active <code>ptp4l</code> processes and removes associated log files.</p>\n\n<p>Detects running <code>ptp4l</code> processes and optionally prompts the user for confirmation before terminating them.\nAfter stopping the processes, it deletes all related log files and clears the loaded client configurations.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>preconfirmation</strong> (<code>Optional[bool]</code>): If <code>True</code>, skips the confirmation prompt. Defaults to <code>False</code>.</li>\n<li><strong>logger</strong> (<code>Optional[Any]</code>): Logger instance for logging messages. Defaults to <code>None</code>.</li>\n<li><strong>extra_indent</strong> (<code>int</code>): Indentation level for console messages. Defaults to <code>0</code>.</li>\n<li><strong>quiet</strong> (<code>bool</code>): If <code>True</code>, suppresses non-critical console output. Defaults to <code>True</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">preconfirmation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra_indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">quiet</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.print_ptp_log", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.print_ptp_log", "kind": "function", "doc": "<p>Displays and follows the real-time log of a selected PTP client.</p>\n\n<p>Lists all available PTP log files corresponding to the namespaces defined in the <code>ptp_clients</code> dictionary.\nPrompts the user to select one and uses <code>tail -F</code> to stream the log output in real time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.core.sync_core.SyncCore.ping_server", "modulename": "syncarium.tui.core.sync_core", "qualname": "SyncCore.ping_server", "kind": "function", "doc": "<p>Performs a ping test to the PTP server from each configured namespace.</p>\n\n<p>For each client, extracts the server's IP address from its <code>.config</code> file by locating the line containing <code>'UDPv4'</code>.\nThen, executes a ping command from the corresponding network namespace to verify connectivity.\nDisplays the result of each ping attempt in the console.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils", "modulename": "syncarium.tui.utils", "kind": "module", "doc": "<h1 id=\"utils\">utils</h1>\n\n<p><strong>Project</strong>: Syncarium - Intelligent Timing Platform Toolkit<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, University of Granada<br />\n<strong>Created</strong>: 2025-06-06<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.utils.sysaux", "modulename": "syncarium.tui.utils.sysaux", "kind": "module", "doc": "<h1 id=\"sysauxpy\">sysaux.py</h1>\n\n<p><strong>Project</strong>: Syncarium - Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: System auxiliar utilities.<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, University of Granada<br />\n<strong>Created</strong>: 2025-06-06<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.utils.sysaux.SysAuxiliar", "modulename": "syncarium.tui.utils.sysaux", "qualname": "SysAuxiliar", "kind": "class", "doc": "<p>Provides system-level utilities for Syncarium, including hardware inspection\nand temperature monitoring.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>console</strong> (<code>Console</code>): Rich Console instance used for output rendering.</li>\n</ul>\n"}, {"fullname": "syncarium.tui.utils.sysaux.SysAuxiliar.__init__", "modulename": "syncarium.tui.utils.sysaux", "qualname": "SysAuxiliar.__init__", "kind": "function", "doc": "<p>Initializes the system utility class with optional console output.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>console</strong> (<code>Optional[Console]</code>): Rich Console instance for output.\nIf not provided, a default Console is created.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "syncarium.tui.utils.sysaux.SysAuxiliar.console", "modulename": "syncarium.tui.utils.sysaux", "qualname": "SysAuxiliar.console", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rich.console.Console"}, {"fullname": "syncarium.tui.utils.sysaux.SysAuxiliar.get_pci_device", "modulename": "syncarium.tui.utils.sysaux", "qualname": "SysAuxiliar.get_pci_device", "kind": "function", "doc": "<p>Retrieves the PCI device ID associated with a given network interface.</p>\n\n<p>Resolves the symbolic link from <code>/sys/class/net/{interface}/device</code> to its\ncorresponding PCI device path and extracts the PCI ID. Returns \"Unknown\"\nif the operation fails.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>interface</strong> (<code>str</code>): Name of the network interface (e.g., <code>\"eth0\"</code>).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><code>str</code>: PCI device ID or <code>\"Unknown\"</code> if not found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interface</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.sysaux.SysAuxiliar.get_cpu_model", "modulename": "syncarium.tui.utils.sysaux", "qualname": "SysAuxiliar.get_cpu_model", "kind": "function", "doc": "<p>Retrieves the CPU model name from the system.</p>\n\n<p>Attempts to read the model name from <code>/proc/cpuinfo</code>. If unavailable,\nfalls back to <code>platform.processor()</code>.</p>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><code>str</code>: CPU model name or <code>\"Unknown\"</code> if it cannot be determined.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.sysaux.SysAuxiliar.get_temperatures", "modulename": "syncarium.tui.utils.sysaux", "qualname": "SysAuxiliar.get_temperatures", "kind": "function", "doc": "<p>Reads system temperature sensors from <code>/sys/class/hwmon</code>.</p>\n\n<p>Iterates through available hwmon devices, identifies sensor names,\nand reads temperature values. Converts millidegree Celsius readings\nto Celsius and returns structured sensor data.</p>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><code>List[Dict[str, Optional[str]]]</code>: List of temperature readings with\nsensor name, label, and temperature in Celsius.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.sysaux.SysAuxiliar.format_columns_with_bullets", "modulename": "syncarium.tui.utils.sysaux", "qualname": "SysAuxiliar.format_columns_with_bullets", "kind": "function", "doc": "<p>Formats a list of strings into multiple columns with bullet points.</p>\n\n<p>Arranges the items into a grid-like structure with a specified number of columns,\napplying indentation and fixed-width formatting for alignment. If the list is empty,\na placeholder message is returned.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>items</strong> (<code>List[str]</code>): List of strings to format.</li>\n<li><strong>columns</strong> (<code>int</code>): Number of columns to display. Defaults to 3.</li>\n<li><strong>width</strong> (<code>int</code>): Width allocated to each column. Defaults to 35.</li>\n<li><strong>indent</strong> (<code>int</code>): Number of spaces to indent each row. Defaults to 4.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><code>str</code>: Formatted string with bullet points arranged in columns.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">35</span>,</span><span class=\"param\">\t<span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools", "modulename": "syncarium.tui.utils.viewtools", "kind": "module", "doc": "<h1 id=\"viewtoolspy\">viewtools.py</h1>\n\n<p><strong>Project</strong>: Syncarium - Intelligent Timing Platform Toolkit<br />\n<strong>Description</strong>: User Interface utilities for TUI.<br />\n<strong>Author</strong>: PhD Student Alberto Ortega Ruiz, PhD Student V\u00edctor V\u00e1zquez, University of Granada<br />\n<strong>Created</strong>: 2025-05-22<br />\n<strong>Version</strong>: 1.0.0<br />\n<strong>License</strong>: GPLv3</p>\n"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools", "kind": "class", "doc": "<p>Utility class for displaying styled console messages and managing UI-related configurations.</p>\n\n<h3 id=\"attributes\">Attributes</h3>\n\n<ul>\n<li><strong>console</strong> (<code>Console</code>): Rich console instance for styled output.</li>\n<li><strong>aux</strong> (<code>SysAuxiliar</code>): Auxiliary system utility instance.</li>\n<li><strong>config_dir</strong> (<code>str</code>): Path to the configuration directory.</li>\n<li><strong>scripts_dir</strong> (<code>str</code>): Path to the shell scripts directory.</li>\n<li><strong>output_dir</strong> (<code>str</code>): Path to the output directory.</li>\n<li><strong>version</strong> (<code>str</code>): Optional version string for display purposes.</li>\n</ul>\n"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.__init__", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.__init__", "kind": "function", "doc": "<p>Initializes the ViewTools instance with optional console and version configuration.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>console</strong> (<code>Optional[Console]</code>): Rich console instance. If not provided, a default one is created.</li>\n<li><strong>version</strong> (<code>str</code>): Optional version string to display in the UI.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">console</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">rich</span><span class=\"o\">.</span><span class=\"n\">console</span><span class=\"o\">.</span><span class=\"n\">Console</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.console", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.console", "kind": "variable", "doc": "<p></p>\n", "annotation": ": rich.console.Console"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.aux", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.aux", "kind": "variable", "doc": "<p></p>\n", "annotation": ": syncarium.tui.utils.sysaux.SysAuxiliar"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.config_dir", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.config_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.scripts_dir", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.scripts_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.output_dir", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.output_dir", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.version", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.console_message", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.console_message", "kind": "function", "doc": "<p>Displays a styled message in the console with optional indentation and logging.</p>\n\n<p>Applies visual formatting based on message type, including emoji and color style.\nSupports logging the plain-text version of the message if a logger is provided.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>type</strong> (<code>str</code>): Type of message (e.g., <code>\"success\"</code>, <code>\"error\"</code>, <code>\"info\"</code>).</li>\n<li><strong>message</strong> (<code>str</code>): Content of the message to display.</li>\n<li><strong>title_emoji</strong> (<code>str</code>): Emoji used for title-type messages. Defaults to <code>\"\ud83d\udd37\"</code>.</li>\n<li><strong>indent</strong> (<code>int</code>): Indentation level for visual hierarchy. Defaults to <code>0</code>.</li>\n<li><strong>logger</strong> (<code>Optional[Logger]</code>): Logger instance to log the plain-text message. Defaults to <code>None</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">title_emoji</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;\ud83d\udd37&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.console_software_title", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.console_software_title", "kind": "function", "doc": "<p>Displays a stylized ASCII art title centered in the terminal, with optional version string.</p>\n\n<p>Clears the console, renders the title using <code>pyfiglet</code>, and centers it horizontally.\nIf a version string is set, it is displayed below the title in a dim italic style.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>text</strong> (<code>str</code>): Text to convert into ASCII art. Defaults to <code>\"Syncarium\"</code>.</li>\n<li><strong>delay</strong> (<code>float</code>): Delay between printing each line. Defaults to <code>0.01</code>.</li>\n<li><strong>font</strong> (<code>str</code>): Font used for ASCII art. Must be a valid <code>pyfiglet</code> font. Defaults to <code>\"big\"</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Syncarium&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;big&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.console_software_subtitle", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.console_software_subtitle", "kind": "function", "doc": "<p>Displays a centered subtitle panel with a description of the software's features.</p>\n\n<p>Uses the <code>rich</code> library to render a styled panel describing the purpose and\nfunctionalities of Syncarium. The panel is centered both horizontally and vertically.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.console_select_menu", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.console_select_menu", "kind": "function", "doc": "<p>Displays a styled selection menu in the console with visual indentation for choices.</p>\n\n<p>Uses <code>inquirer</code> to render an interactive menu. Supports indentation for hierarchical\ndisplay of options and accepts both strings and dictionaries with <code>name</code> and <code>value</code>.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>choices</strong> (<code>list</code>): List of options to display. Can be strings or dicts with <code>name</code> and <code>value</code>.</li>\n<li><strong>message</strong> (<code>str</code>): Prompt message shown above the menu. Defaults to <code>\"Select an option:\"</code>.</li>\n<li><strong>indent</strong> (<code>int</code>): Indentation level for visual hierarchy. Defaults to <code>0</code>.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><code>Any</code>: The selected value from the menu.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">choices</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Select an option:&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">indent</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.refresh_view", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.refresh_view", "kind": "function", "doc": "<p>Displays a visual refresh indicator in the console.</p>\n\n<p>Prints a styled message and decorative rules to indicate that the view is being refreshed.\nIncludes a short delay to simulate a loading effect.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.real_time_log", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.real_time_log", "kind": "function", "doc": "<p>Displays the contents of a log file in real time using the <code>tail -F</code> command.</p>\n\n<p>Checks if the specified log file exists. If it does, streams its content to the console.\nThe user can interrupt the stream with Ctrl+C. If the file is missing, an error is shown.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>log_path</strong> (<code>str</code>): Path to the log file to monitor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">log_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.real_time_progress", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.real_time_progress", "kind": "function", "doc": "<p>Displays a real-time progress bar for the duration of a running process.</p>\n\n<p>Uses Rich's progress bar to visually represent elapsed time. Updates until the\nspecified duration is reached or the user interrupts the display.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>start_time</strong> (<code>float</code>): Timestamp when the process started (in seconds since epoch).</li>\n<li><strong>duration</strong> (<code>int</code>): Total duration of the process in seconds.</li>\n<li><strong>message</strong> (<code>str</code>): Message to display alongside the progress bar.</li>\n<li><strong>repetition_info</strong> (<code>Optional[int]</code>): Optional repetition count to append to the message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">repetition_info</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.table_network_namespaces", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.table_network_namespaces", "kind": "function", "doc": "<p>Displays a table of network namespaces and their associated interfaces.</p>\n\n<p>Uses system commands to retrieve information about existing network namespaces,\nincluding their interfaces, IP addresses, MAC addresses, and default gateways.\nThe data is presented in a styled table using the <code>rich</code> library. If no namespaces\nare found, a warning panel is displayed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.table_synccore_processes", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.table_synccore_processes", "kind": "function", "doc": "<p>Displays a table of currently running PTP (Precision Time Protocol) processes.</p>\n\n<p>Uses <code>pgrep</code> and <code>ps</code> to identify running <code>ptp4l</code> processes and extract details\nsuch as PID, start time, command line, and stdout redirection path. If no processes\nare found, a warning panel is shown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.table_dpdk_bound_devices", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.table_dpdk_bound_devices", "kind": "function", "doc": "<p>Lists network devices currently bound to DPDK-compatible drivers.</p>\n\n<p>Executes the <code>dpdk_nic_bind.py -s</code> script to retrieve information about\nnetwork interfaces using DPDK drivers. Parses the output to extract device\ndetails and displays them in a formatted Rich table.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>dpdk_path</strong> (<code>str</code>): Path to the directory containing the <code>dpdk_devbind.py</code> script.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><code>List[str]</code>: List of strings representing DPDK-bound devices, or an empty list if none are found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dpdk_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.table_loadgen", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.table_loadgen", "kind": "function", "doc": "<p>Displays a table of currently running TRex traffic generator server processes.</p>\n\n<p>Uses <code>pgrep</code> and <code>ps</code> to identify running <code>_t-rex-64</code> processes and extract\ndetails such as PID, start time, and command line. If no processes are found,\na warning panel is displayed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.table_stl_program", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.table_stl_program", "kind": "function", "doc": "<p>Displays a table summarizing the status of an STL process.</p>\n\n<p>Shows process metadata including PID, state, filename, arguments, duration,\nand start time. If no process is running, a warning panel is displayed.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>stl_process</strong>: STL process object. Must have a <code>pid</code> attribute.</li>\n<li><strong>filename</strong> (<code>str</code>): Name of the STL file being processed.</li>\n<li><strong>args</strong> (<code>List[str]</code>): List of arguments passed to the STL process.</li>\n<li><strong>start_time</strong> (<code>float</code>): Timestamp indicating when the process started.</li>\n<li><strong>duration</strong> (<code>int</code>): Duration of the process in seconds.</li>\n<li><strong>state</strong> (<code>str</code>): Current state of the STL process.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stl_process</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.table_datasources", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.table_datasources", "kind": "function", "doc": "<p>Displays a formatted table of loaded data sources in the console.</p>\n\n<p>Uses Rich to render a table showing the name, type, and parameters of each\nloaded data source. If no sources are provided, a warning panel is shown.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>sources</strong> (<code>List[dict]</code>): List of dictionaries representing data source configurations.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sources</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.table_last_metric", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.table_last_metric", "kind": "function", "doc": "<p>Displays a table with metadata from the 5 most recent extraction YAML files.</p>\n\n<p>Scans the output directory for YAML files containing extraction metadata,\nparses them, and shows a summary table with duration, timestamps, and completion status.\nIf more than 5 extractions are found, only the most recent 5 are shown and a warning is displayed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.table_data_extractor", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.table_data_extractor", "kind": "function", "doc": "<p>Displays a table summarizing the current status of the data extraction process.</p>\n\n<p>Checks if the writer process is alive and, if so, prints a table showing its PID,\noutput file, start time, duration, and the names of the data sources involved.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>writer_process</strong> (<code>multiprocessing.Process</code>): Process handling data writing.</li>\n<li><strong>data_sources</strong> (<code>List[dict]</code>): List of data source configurations.</li>\n<li><strong>output_file</strong> (<code>str</code>): Path to the output file.</li>\n<li><strong>start_time</strong> (<code>float</code>): Timestamp when the extraction started.</li>\n<li><strong>duration</strong> (<code>int</code>): Duration of the extraction in seconds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">writer_process</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Process</span>,</span><span class=\"param\">\t<span class=\"n\">data_sources</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">output_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.table_experiment", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.table_experiment", "kind": "function", "doc": "<p>Displays a table summarizing the current experiment's status and associated files.</p>\n\n<p>Shows metadata including experiment ID, name, state, duration, start time,\nand associated PTP, STL, and DEXT components with their respective start times.</p>\n\n<h3 id=\"args\">Args</h3>\n\n<ul>\n<li><strong>exp_fn</strong> (<code>str</code>): Name of the experiment.</li>\n<li><strong>exp_state</strong> (<code>str</code>): Current state of the experiment (e.g., <code>\"Running\"</code>, <code>\"Completed\"</code>).</li>\n<li><strong>exp_id</strong> (<code>str</code>): Unique identifier (HashID) of the experiment.</li>\n<li><strong>exp_duration</strong> (<code>int</code>): Total duration of the experiment in seconds.</li>\n<li><strong>exp_start_ts</strong> (<code>float</code>): Timestamp when the experiment started.</li>\n<li><strong>exp_ptp_clients</strong> (<code>str</code>): Comma-separated list of PTP client names.</li>\n<li><strong>exp_ptp_ts</strong> (<code>int</code>): Start time (in seconds) of the PTP process.</li>\n<li><strong>exp_stl_fn</strong> (<code>str</code>): Filename of the STL file.</li>\n<li><strong>exp_stl_ts</strong> (<code>int</code>): Start time (in seconds) of the STL process.</li>\n<li><strong>exp_dext_datasources</strong> (<code>str</code>): Comma-separated list of DEXT data sources.</li>\n<li><strong>exp_dext_ts</strong> (<code>int</code>): Start time (in seconds) of the DEXT process.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">exp_fn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exp_state</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exp_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exp_duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">exp_start_ts</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">exp_ptp_clients</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exp_ptp_ts</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">exp_stl_fn</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exp_stl_ts</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">exp_dext_datasources</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">exp_dext_ts</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "syncarium.tui.utils.viewtools.ViewTools.panel_platform_info", "modulename": "syncarium.tui.utils.viewtools", "qualname": "ViewTools.panel_platform_info", "kind": "function", "doc": "<p>Displays detailed system information in a styled panel.</p>\n\n<p>Gathers and formats host system details including hostname, CPU model,\ncore counts, RAM, temperature, active network interfaces, available shell\ndrivers, and configuration files. The information is rendered using Rich\nin a visually styled panel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();